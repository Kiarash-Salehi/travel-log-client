{"version":3,"sources":["API.js","MapPin.js","LogEntryForm.js","App.js","index.js"],"names":["API_URL","listEntryLogs","a","fetch","response","json","createEntryLogs","entry","method","headers","body","JSON","stringify","MapPin","color","viewport","clicked","style","width","zoom","height","maxWidth","maxHeight","transform","viewBox","stroke","strokeWidth","fill","strokeLinecap","onClick","d","cx","cy","r","LogEntryForm","location","onClose","useState","loading","setLoading","error","setError","useForm","register","handleSubmit","onSubmit","data","latitude","longitude","message","className","autoComplete","name","type","ref","required","rows","disabled","App","logEntries","setLogEntries","showPopup","setShowPopup","addEntryLocation","setAddEntryLocation","setViewport","getEntries","useEffect","mapStyle","mapboxApiAccessToken","process","onViewportChange","onDblClick","event","lngLat","doubleClickZoom","map","Fragment","key","_id","closeButton","closeOnClick","dynamicPosition","anchor","zIndex","title","description","comments","Date","visitDate","toLocaleDateString","image","src","alt","tilte","objectFit","margin","textAlign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04dac7db.chunk.js","sourcesContent":["const API_URL = 'https://travel-log-mern-stack.herokuapp.com/';\r\n\r\nexport async function listEntryLogs() {\r\n    const response = await fetch(API_URL);\r\n    return response.json();\r\n}\r\n\r\nexport async function createEntryLogs(entry) {\r\n    const response = await fetch(API_URL, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"content-type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(entry)\r\n    });\r\n    return response.json();\r\n}","import React from 'react';\r\n\r\nfunction MapPin({ color, viewport, clicked }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\tstyle={{\r\n\t\t\t\twidth: 6 * viewport.zoom + 'px',\r\n\t\t\t\theight: 6 * viewport.zoom + 'px',\r\n\t\t\t\tmaxWidth: '44px',\r\n\t\t\t\tmaxHeight: '44px',\r\n\t\t\t\ttransform: 'translate(-50%, -100%)'\r\n\t\t\t}}\r\n\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\twidth=\"48\"\r\n\t\t\theight=\"48\"\r\n\t\t\tstroke={color}\r\n\t\t\tstrokeWidth=\"1.5\"\r\n\t\t\tfill=\"none\"\r\n\t\t\tstrokeLinecap=\"round\"\r\n\t\t\tonClick={clicked}\r\n\t\t\t>\r\n\t\t\t<path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\r\n\t\t\t<circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\r\n\t\t</svg>\r\n\t);\r\n};\r\n\r\nexport default MapPin;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport './LogEntryForm.css';\r\nimport { createEntryLogs } from './API';\r\n\r\nfunction LogEntryForm({ location, onClose }) {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState('');\r\n\tconst { register, handleSubmit } = useForm();\r\n\tconst onSubmit = async data => {\r\n\t\ttry {\r\n\t\t\tsetLoading(true);\r\n\t\t\tdata.latitude = location.latitude;\r\n\t\t\tdata.longitude = location.longitude;\r\n\t\t\tawait createEntryLogs(data);\r\n\t\t\tonClose();\r\n\t\t} catch (error) {\r\n\t\t\tsetError(error.message);\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"LogEntryForm\">\r\n\t\t\t{error && <h3 className=\"LogEntryForm__error\">{error}</h3>}\r\n\t\t\t<h3>Add your log entry here</h3>\r\n\t\t\t<form onSubmit={handleSubmit(onSubmit)} className=\"LogEntryForm__form\">\r\n\t\t\t\t<label>\r\n\t\t\t\t\tTitle: <input autoComplete=\"off\" className=\"LogEntryForm__input\" name=\"title\" type=\"text\" ref={register} required />\r\n\t\t\t\t</label>\r\n\t\t\t\t<label>\r\n\t\t\t\t\tComments: <textarea className=\"LogEntryForm__input\" name=\"comments\" rows={3} ref={register}></textarea>\r\n\t\t\t\t</label>\r\n\t\t\t\t<label>\r\n\t\t\t\t\tDescription: <textarea className=\"LogEntryForm__input\" name=\"description\" rows={3} ref={register}></textarea>\r\n\t\t\t\t</label>\r\n\t\t\t\t<label>\r\n\t\t\t\t\tImage <input autoComplete=\"off\" className=\"LogEntryForm__input\" name=\"image\" type=\"text\" ref={register} />\r\n\t\t\t\t</label>\r\n\t\t\t\t<label>\r\n\t\t\t\t\tVisit Date: <input className=\"LogEntryForm__input\" name=\"visitDate\" type=\"date\" required ref={register} />\r\n\t\t\t\t</label>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className=\"LogEntryForm__button\" type=\"submit\" disabled={loading}>{loading ? 'Loading...' : 'Create Log Entry'}</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LogEntryForm;\r\n","import React, { useState, useEffect } from 'react';\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\nimport { listEntryLogs } from './API';\nimport MapPin from './MapPin';\nimport LogEntryForm from './LogEntryForm';\n\nconst App = () => {\n  const [logEntries, setLogEntries] = useState([]);\n  const [showPopup, setShowPopup] = useState({});\n  const [addEntryLocation, setAddEntryLocation] = useState(null);\n  const [viewport, setViewport] = useState({\n    width: '100vw',\n    height: '100vh',\n    latitude: 37.6,\n    longitude: -95.665,\n    zoom: 3,\n  });\n  const getEntries = async () => {\n    const logEntries = await listEntryLogs();\n    setLogEntries(logEntries);\n  };\n  // eslint-disable-next-line\n  useEffect(() => {\n    getEntries();\n  }, []);\n  const showAddMarkerPopup = event => {\n    const [longitude, latitude] = event.lngLat;\n    setShowPopup({});\n    setAddEntryLocation({\n      latitude,\n      longitude\n    });\n  };\n  return (\n    <ReactMapGL\n      {...viewport}\n      mapStyle=\"mapbox://styles/ksdeveloper82/ckdujcveq185w19prbl4e16tu\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      onViewportChange={setViewport}\n      onDblClick={showAddMarkerPopup}\n      doubleClickZoom={false}\n    >\n      {logEntries.map(entry => (\n        <React.Fragment key={entry._id}>\n          <Marker\n            latitude={entry.latitude}\n            longitude={entry.longitude}\n          >\n            <MapPin\n              color=\"yellow\"\n              viewport={viewport}\n              clicked={() => {\n                setShowPopup({ [entry._id]: true });\n                setAddEntryLocation(null);\n              }}\n            />\n          </Marker>\n          {\n            showPopup[entry._id] && (\n              <Popup\n                latitude={entry.latitude}\n                longitude={entry.longitude}\n                closeButton={true}\n                closeOnClick={false}\n                dynamicPosition={true}\n                onClose={() => {\n                  setShowPopup({});\n                }}\n                anchor=\"top\"\n                style={{ zIndex: '1000' }}\n              >\n                <div style={{ width: '40vw' }}>\n                  <h3>{entry.title}</h3>\n                  {entry.description && <p>{entry.description}</p>}\n                  <p>{entry.comments}</p>\n                  <small>Visited at: {new Date(entry.visitDate).toLocaleDateString()}</small>\n                  {entry.image && <img\n                    src={entry.image}\n                    alt={entry.tilte}\n                    style={{\n                      width: '100%',\n                      maxHeight: \"200px\",\n                      objectFit: 'contain',\n                      margin: '.2rem auto',\n                      textAlign: 'center'\n                    }}\n                  />}\n                </div>\n              </Popup>\n            )\n          }\n          {addEntryLocation && (\n            <>\n              <Marker\n                latitude={addEntryLocation.latitude}\n                longitude={addEntryLocation.longitude}\n              >\n                <MapPin\n                  color=\"red\"\n                  viewport={viewport}\n                />\n              </Marker>\n              <Popup\n                latitude={addEntryLocation.latitude}\n                longitude={addEntryLocation.longitude}\n                closeButton={true}\n                closeOnClick={false}\n                dynamicPosition={true}\n                onClose={() => {\n                  setAddEntryLocation(null);\n                }}\n                anchor=\"top\"\n              >\n                <div style={{ width: '40vw' }}>\n                  <LogEntryForm onClose={() => {\n                    setAddEntryLocation(null);\n                    getEntries();\n                  }} location={addEntryLocation} />\n                </div>\n              </Popup>\n            </>\n          )}\n        </React.Fragment>\n      ))\n      }\n    </ReactMapGL>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}